---
# tasks file for hw_oceanstor_storage
- name: change-password Change OceanStor default password
  hw_oceanstor_manage:
    api_url: "{{ manager_float_ip }}"
    api_port: "{{ api_port }}"
    username: "{{ api_username }}"
    password: "{{ default_api_password }}"
    validate_certs: false
    param:
      new_password: "{{ api_password }}"
    function: "modify_user_password"
  tags:
    - change-password

- include: set_token.yml
  tags:
    - restore-factory
    - add-node
    - install-node
    - add-compute
    - create-control-cluster
    - config-network
    - remove-node
    - create-pool
    - create-VBS
    - remove-node
    - add-storage
    - import-license

- name: restore-factory Restore factory for OceanStor node
  hw_oceanstor_manage:
    api_url: "{{ manager_float_ip }}"
    api_port: "{{ api_port }}"
    username: "{{ api_username }}"
    password: "{{ api_password }}"
    validate_certs: false
    token: "{{ api_token }}"
    function: "restore_factory"
  tags:
    - restore-factory
    - never

- name: add-node Check node whether in Cluster
  hw_oceanstor_add_storage:
    api_url: "{{ manager_float_ip }}"
    api_port: "{{ api_port }}"
    username: "{{ api_username }}"
    password: "{{ api_password }}"
    token: "{{ api_token }}"
    servers: "{{ server_list }}"
    step: "check_node_in_cluster"
  become: yes
  register: result_check
  tags:
    - add-node
    - add-storage

- name: add-node Exit if no new node to add
  fail:
    msg: "{{ result_check }}"
  when: result_check.status=='fail'
  tags:
    - add-node
    - add-storage

- include: add_node.yml
  vars:
    step: "add_node"
    add_server_list: "{{ result_check.servers }}"
    default_root_password: "{{ server_default_root_password }}"
  when: result_check.servers
  tags:
    - add-node
    - add-storage

- include: network.yml
  tags:
    - config-network
    - add-storage

- include: install_node.yml
  tags:
    - install-node
    - add-storage

- name: remove-node Remove Huawei OceanStor node
  hw_oceanstor_add_storage:
    api_url: "{{ manager_float_ip }}"
    api_port: "{{ api_port }}"
    username: "{{ api_username }}"
    password: "{{ api_password }}"
    token: "{{ api_token }}"
    service_type: "all"
    servers: "{{ remove_server_list }}"
    step: "remove_node"
  become: yes
  register: result
  tags:
    - remove-node
    - never

- name: "create-control-cluster Create OceanStor manage cluster"
  hw_oceanstor_manage:
    api_url: "{{ manager_float_ip }}"
    api_port: "{{ api_port }}"
    username: "{{ api_username }}"
    password: "{{ api_password }}"
    validate_certs: false
    token: "{{ api_token }}"
    function: "create_manage_cluster"
    param: "{{ manage_cluster }}"
  become: yes
  tags:
    - create-control-cluster

- include: license.yml

- name: "create-pool Create OceanStor storage pool"
  hw_oceanstor_manage:
    api_url: "{{ manager_float_ip }}"
    api_port: "{{ api_port }}"
    username: "{{ api_username }}"
    password: "{{ api_password }}"
    validate_certs: false
    token: "{{ api_token }}"
    function: "create_storage_pool"
    param:
      poolName: "{{ oceanstor_pool.name }}"
      serviceType: "{{ oceanstor_pool.service_type }}"
      encryptType: "{{ oceanstor_pool.encryt_type }}"
      storageMediaType: "{{ oceanstor_pool.main_media_type }}"
      cacheMediaType: "{{ oceanstor_pool.cache_media_type }}"
      compressionAlgorithm: "{{ oceanstor_pool.compression_algorithm }}"
      redundancyPolicy: "{{ oceanstor_pool.redundancy_policy }}"
      replicaNum: "{{ oceanstor_pool.replica_num }}"
      securityLevel: "{{ oceanstor_pool.security_level }}"
      numDataUnits: "{{ oceanstor_pool.num_data_units }}"
      numParityUnits: "{{ oceanstor_pool.num_parity_units }}"
      numFaultTolerance: "{{ oceanstor_pool.num_fault_tolerance }}"
      serverList: "{{ oceanstor_pool.server_list }}"
  become: yes
  register: pool_task
  tags:
    - create-pool
    - never

- name: create-pool Check create OceanStor storage pool progress
  hw_oceanstor_manage:
    api_url: "{{ manager_float_ip }}"
    api_port: "{{ api_port }}"
    username: "{{ api_username }}"
    password: "{{ api_password }}"
    validate_certs: false
    token: "{{ api_token }}"
    function: "query_task_info"
    param:
      taskId: "{{ pool_task.taskId }}"
  become: yes
  register: progress
  until: "progress.task.taskStatus=='success' or progress.task.taskStatus=='failed'"
  delay: 5
  retries: 50
  tags:
    - never
    - create-pool

- name: "create-pool Exit if create OceanStor storage pool failture"
  fail: msg="fail"
  when: progress.task.taskStatus != 'success'
  tags:
    - never
    - create-pool

- name: create-VBS Check node whether in Cluster
  hw_oceanstor_add_storage:
    api_url: "{{ manager_float_ip }}"
    api_port: "{{ api_port }}"
    username: "{{ api_username }}"
    password: "{{ api_password }}"
    token: "{{ api_token }}"
    service_type: "agent"
    servers: "{{ vbs_list }}"
    step: "check_node_in_cluster"
  become: yes
  register: result_check
  tags:
    - never
    - create-VBS
    - add-compute

- include: add_node.yml
  vars:
    step: "add_compute"
    add_server_list: "{{ result_check.servers }}"
    default_root_password: "{{ server_default_root_password }}"
  when: result_check.servers
  tags:
    - never
    - create-VBS
    - add-compute

- include: network.yml
  when: result_check.servers
  tags:
    - never
    - add-compute

- include: install_node.yml
  when: result_check.servers
  tags:
    - never
    - create-VBS
    - add-compute

- name: "create-VBS Create VBS client"
  hw_oceanstor_manage:
    api_url: "{{ manager_float_ip }}"
    api_port: "{{ api_port }}"
    username: "{{ api_username }}"
    password: "{{ api_password }}"
    validate_certs: false
    token: "{{ api_token }}"
    function: "create_vbs_client"
    param:
      vbs_list: "{{ vbs_list }}"
  become: yes
  register: result
  tags:
    - never
    - create-VBS
    - add-compute
