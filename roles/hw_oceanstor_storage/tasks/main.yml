---
# tasks file for hw_oceanstor_storage
- name: Change OceanStor default password
  hw_oceanstor_manage:
    api_url: "{{ manager_float_ip }}"
    api_port: "{{ api_port }}"
    username: "{{ api_username }}"
    password: "{{ default_api_password }}"
    validate_certs: false
    param:
      new_password: "{{ api_password }}"
    function: "modify_user_password"
  tags:
    - change-password

- name: Get OceanStor Auth token
  hw_oceanstor_manage:
    api_url: "{{ manager_float_ip }}"
    api_port: "{{ api_port }}"
    username: "{{ api_username }}"
    password: "{{ api_password }}"
    validate_certs: false
    function: "get_token"
  become: yes
  register: token
  tags:
    - restore-factory
    - add-node
    - install-storage
    - add-compute
    - mdc
    - network
    - remove-node
    - create-pool
    - create-VBS
    - remove-storage
    - add-storage

- name: Set api-token factor
  set_fact: api_token={{ token.token }}
  tags:
    - restore-factory
    - add-node
    - install-storage
    - add-compute
    - mdc
    - network
    - remove-node
    - create-pool
    - create-VBS
    - remove-storage
    - add-storage

- name: Restore factory for OceanStor node
  hw_oceanstor_manage:
    api_url: "{{ manager_float_ip }}"
    api_port: "{{ api_port }}"
    username: "{{ api_username }}"
    password: "{{ api_password }}"
    validate_certs: false
    token: "{{ api_token }}"
    function: "restore_factory"
  tags:
    - restore-factory
    - never

- name: Add Huawei OceanStor node
  hw_oceanstor_add_storage:
    api_url: "{{ manager_float_ip }}"
    api_port: "{{ api_port }}"
    username: "{{ api_username }}"
    password: "{{ api_password }}"
    token: "{{ api_token }}"
    servers: "{{ server_list }}"
    default_root_password: "{{ server_default_root_password }}"
    step: "add_node"
  become: yes
  register: result_add
  tags:
    - add-node
    - add-compute
    - add-storage

- name: Check Add Huawei OceanStor node status
  hw_oceanstor_add_storage:
    api_url: "{{ manager_float_ip }}"
    api_port: "{{ api_port }}"
    username: "{{ api_username }}"
    password: "{{ api_password }}"
    token: "{{ api_token }}"
    service_type: "agent"
    servers: "{{ server_list }}"
    step: "check_add_storage_status"
  become: yes
  register: result
  until: "result.status=='success' or result.status=='fail'"
  retries: "{{ result_add.trytimes }}"
  delay: 5
  tags:
    - add-node
    - add-compute
    - add-storage

- name: Exit if add OceanStor task failture
  fail: msg="fail"
  when: result.status=='fail'
  tags:
    - add-node
    - add-compute
    - add-storage

- name: Install Huawei OceanStor node FSA
  hw_oceanstor_add_storage:
    api_url: "{{ manager_float_ip }}"
    api_port: "{{ api_port }}"
    username: "{{ api_username }}"
    password: "{{ api_password }}"
    token: "{{ api_token }}"
    service_type: "agent"
    servers: "{{ server_list }}"
    step: "install_node"
  become: yes
  register: result_install
  tags:
    - add-node
    - add-compute
    - add-storage

- name: Check Install Huawei OceanStor node FSA status
  hw_oceanstor_add_storage:
    api_url: "{{ manager_float_ip }}"
    api_port: "{{ api_port }}"
    username: "{{ api_username }}"
    password: "{{ api_password }}"
    token: "{{ api_token }}"
    service_type: "agent"
    servers: []
    step: "check_status"
  become: yes
  register: result
  until: "result.status=='success' or result.status=='failure'"
  retries: "{{ result_install.trytimes }}"
  delay: 5
  tags:
    - add-node
    - add-compute
    - add-storage

- name: Exit if Install node FSA task failture
  fail: msg="fail"
  when: result.status=='failure'
  tags:
    - add-node
    - add-compute
    - add-storage

- name: Config OceanStor node frontend network
  hw_oceanstor_config_network:
    api_url: "{{ manager_float_ip }}"
    api_port: "{{ api_port }}"
    username: "{{ api_username }}"
    password: "{{ api_password }}"
    token: "{{ api_token }}"
    network_param: "{{ storage_network }}"
    network_type: "storage_frontend"
    step: "config_network"
  tags:
    - network
    - add-compute
    - add-storage

- name: Config OceanStor node backend network
  hw_oceanstor_config_network:
    api_url: "{{ manager_float_ip }}"
    api_port: "{{ api_port }}"
    username: "{{ api_username }}"
    password: "{{ api_password }}"
    token: "{{ api_token }}"
    network_param: "{{ storage_network }}"
    network_type: "storage_backend"
    step: "config_network"
  tags:
    - network
    - add-compute
    - add-storage

- name: Validity OceanStor node frontend network
  hw_oceanstor_config_network:
    api_url: "{{ manager_float_ip }}"
    api_port: "{{ api_port }}"
    username: "{{ api_username }}"
    password: "{{ api_password }}"
    token: "{{ api_token }}"
    network_param: "{{ storage_network }}"
    network_type: "storage_frontend"
    step: "validity_network"
  tags:
    - network
    - add-compute
    - add-storage

- name: Validity OceanStor node backend network
  hw_oceanstor_config_network:
    api_url: "{{ manager_float_ip }}"
    api_port: "{{ api_port }}"
    username: "{{ api_username }}"
    password: "{{ api_password }}"
    token: "{{ api_token }}"
    network_param: "{{ storage_network }}"
    network_type: "storage_backend"
    step: "validity_network"
  tags:
    - network
    - add-compute
    - add-storage

- name: Install Huawei OceanStor node all
  hw_oceanstor_add_storage:
    api_url: "{{ manager_float_ip }}"
    api_port: "{{ api_port }}"
    username: "{{ api_username }}"
    password: "{{ api_password }}"
    token: "{{ api_token }}"
    service_type: "all"
    servers: "{{ server_list }}"
    step: "install_node"
  become: yes
  register: result_install
  tags:
    - add-compute
    - install-node
    - add-storage

- name: Check Install Huawei OceanStor node status
  hw_oceanstor_add_storage:
    api_url: "{{ manager_float_ip }}"
    api_port: "{{ api_port }}"
    username: "{{ api_username }}"
    password: "{{ api_password }}"
    token: "{{ api_token }}"
    servers: "{{ server_list }}"
    service_type: "all"
    step: "check_status"
  become: yes
  register: result
  until: "result.status=='success' or result.status=='failure'"
  delay: 5
  retries: "{{ result_install.trytimes }}"
  tags:
    - add-compute
    - install-node
    - add-storage

- name: Exit if install OceanStor task failture
  fail: msg="fail"
  when: result.status=='failure'
  tags:
    - add-compute
    - install-node
    - add-storage

- name: Remove Huawei OceanStor node
  hw_oceanstor_add_storage:
    api_url: "{{ manager_float_ip }}"
    api_port: "{{ api_port }}"
    username: "{{ api_username }}"
    password: "{{ api_password }}"
    token: "{{ api_token }}"
    service_type: "all"
    servers: "{{ remove_server_list }}"
    step: "remove_node"
  become: yes
  register: result
  tags:
    - remove-node
    - never

- name: "Create OceanStor manage cluster"
  hw_oceanstor_manage:
    api_url: "{{ manager_float_ip }}"
    api_port: "{{ api_port }}"
    username: "{{ api_username }}"
    password: "{{ api_password }}"
    validate_certs: false
    token: "{{ api_token }}"
    function: "create_manage_cluster"
    param: "{{ manage_cluster }}"
  become: yes
  tags:
    - mdc

- name: "Query active licenses in batches."
  hw_oceanstor_manage:
    api_url: "{{ manager_float_ip }}"
    api_port: "{{ api_port }}"
    username: "{{ api_username }}"
    password: "{{ api_password }}"
    validate_certs: false
    token: "{{ api_token }}"
    function: "query_active_license"
    param:
  become: yes
  register: result
  tags:
    - query-license
    - never

- name: "Exit if have no license file"
  fail: msg="result.msg"
  when: result.status=='fail'
  tags:
    - query-license
    - never

- name: "Upload License File"
  hw_oceanstor_manage:
    api_url: "{{ manager_float_ip }}"
    api_port: "{{ api_port }}"
    username: "{{ api_username }}"
    password: "{{ api_password }}"
    validate_certs: false
    token: "{{ api_token }}"
    function: "upload_license"
    param:
      license_file_path: "{{ license_file_path }}"
  become: yes
  register: result
  tags:
    - license
    - upload-license
    - never

- name: "Activate License File"
  hw_oceanstor_manage:
    api_url: "{{ manager_float_ip }}"
    api_port: "{{ api_port }}"
    username: "{{ api_username }}"
    password: "{{ api_password }}"
    validate_certs: false
    token: "{{ api_token }}"
    function: "activate_license"
    param:
  become: yes
  register: result
  tags:
    - license
    - activate-license
    - never

- name: "Exit if activate license file fail"
  fail: msg="result.msg"
  when: result.status=='fail'
  tags:
    - license
    - activate-license
    - never

- name: "Create OceanStor storage pool"
  hw_oceanstor_manage:
    api_url: "{{ manager_float_ip }}"
    api_port: "{{ api_port }}"
    username: "{{ api_username }}"
    password: "{{ api_password }}"
    validate_certs: false
    token: "{{ api_token }}"
    function: "create_storage_pool"
    param:
      poolName: "{{ oceanstor_pool.name }}"
      serviceType: "{{ oceanstor_pool.service_type }}"
      encryptType: "{{ oceanstor_pool.encryt_type }}"
      storageMediaType: "{{ oceanstor_pool.main_media_type }}"
      cacheMediaType: "{{ oceanstor_pool.cache_media_type }}"
      compressionAlgorithm: "{{ oceanstor_pool.compression_algorithm }}"
      redundancyPolicy: "{{ oceanstor_pool.redundancy_policy }}"
      replicaNum: "{{ oceanstor_pool.replica_num }}"
      securityLevel: "{{ oceanstor_pool.security_level }}"
      numDataUnits: "{{ oceanstor_pool.num_data_units }}"
      numParityUnits: "{{ oceanstor_pool.num_parity_units }}"
      numFaultTolerance: "{{ oceanstor_pool.num_fault_tolerance }}"
      serverList: "{{ oceanstor_pool.server_list }}"
  become: yes
  register: pool_task
  tags:
    - create-pool
    - never

- name: Check create OceanStor storage pool progress
  hw_oceanstor_manage:
    api_url: "{{ manager_float_ip }}"
    api_port: "{{ api_port }}"
    username: "{{ api_username }}"
    password: "{{ api_password }}"
    validate_certs: false
    token: "{{ api_token }}"
    function: "query_task_info"
    param:
      taskId: "{{ pool_task.taskId }}"
  become: yes
  register: progress
  until: "progress.task.taskStatus=='success' or progress.task.taskStatus=='failed'"
  delay: 5
  retries: 50
  tags:
    - never
    - create-pool

- name: "Create VBS client"
  hw_oceanstor_manage:
    api_url: "{{ manager_float_ip }}"
    api_port: "{{ api_port }}"
    username: "{{ api_username }}"
    password: "{{ api_password }}"
    validate_certs: false
    token: "{{ api_token }}"
    function: "create_vbs_client"
    param:
      vbs_list: "{{ vbs_list }}"
  become: yes
  register: result
  tags:
    - never
    - create-VBS

- name: "Exit if create VBS client failture"
  fail: msg="fail"
  when: result.status=='failure'
  tags:
    - never
    - create-VBS

- name: "Create VBS client for compute"
  hw_oceanstor_manage:
    api_url: "{{ manager_float_ip }}"
    api_port: "{{ api_port }}"
    username: "{{ api_username }}"
    password: "{{ api_password }}"
    validate_certs: false
    token: "{{ api_token }}"
    function: "create_vbs_client"
    param:
      vbs_list: "{{ result_add.params }}"
  become: yes
  register: result
  tags:
    - storage
    - add-compute
    - never

- name: "Exit if create VBS client for compute failture"
  fail: msg="fail"
  when: result.status=='failure'
  tags:
    - storage
    - add-compute
    - never
